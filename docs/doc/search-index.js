var N=null,E="",T="t",U="u",searchIndex={};
var R=["markov_chain","Vector with $order elements","Construct a vector from an array","downcast","Downcast the vector to an owned array","Turn the vector into a interator of it's values","matrix3","result","markov_chain::alg","try_from","borrow_mut","try_into","type_id","to_owned","clone_into","borrow","typeid","index_mut","formatter","MarkovChain3"];

searchIndex[R[0]]={"doc":"A Markov chain is a stochastic model describing a sequence…","i":[[3,R[19],R[0],"MarkovChain with three nodes",N,N],[0,"alg",E,"Algebra module for MarkovChains",N,N],[3,"Matrix3",R[8],"A column major 3x3 square matrix",N,N],[3,"Vec2",E,R[1],N,N],[3,"Vec3",E,R[1],N,N],[3,"Vec4",E,R[1],N,N],[3,"Vec5",E,R[1],N,N],[3,"Vec6",E,R[1],N,N],[11,"new",E,"Construct a Matrix from a row major representation",0,N],[11,"to_row_major",E,"Create a row major matrix from a column major one",0,[[["self"]],["self"]]],[11,"iter",E,"Turn the matrix into a interator of it's vectors",0,[[["self"]],["iter",["vec3"]]]],[11,"new",E,R[2],1,N],[11,R[3],E,R[4],1,N],[11,"iter",E,R[5],1,[[["self"]],["iter",["f64"]]]],[11,"new",E,R[2],2,N],[11,R[3],E,R[4],2,N],[11,"iter",E,R[5],2,[[["self"]],["iter",["f64"]]]],[11,"new",E,R[2],3,N],[11,R[3],E,R[4],3,N],[11,"iter",E,R[5],3,[[["self"]],["iter",["f64"]]]],[11,"new",E,R[2],4,N],[11,R[3],E,R[4],4,N],[11,"iter",E,R[5],4,[[["self"]],["iter",["f64"]]]],[11,"new",E,R[2],5,N],[11,R[3],E,R[4],5,N],[11,"iter",E,R[5],5,[[["self"]],["iter",["f64"]]]],[11,"from",R[0],"Construct a Markov Chain.",6,[[[R[6]],["vec3"]],["self"]]],[11,"set_trans",E,"Replace the transition matrix",6,[[["self"],[R[6]]]]],[11,"set_init",E,"Replace the initial state",6,[[["self"],["vec3"]]]],[11,"take_to",E,"Run the chain until to a step.",6,[[["self"],["usize"]],["vec3"]]],[11,"has_absorbing_state",E,"Check if the chain has an absorbing state.",6,[[["self"]],["bool"]]],[14,"vector",E,"Generate code for a vector with name and order Example:…",N,N],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[9],E,E,6,[[[U]],[R[7]]]],[11,R[15],E,E,6,[[["self"]],[T]]],[11,R[12],E,E,6,[[["self"]],[R[16]]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[7]]]],[11,"from",R[8],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[9],E,E,0,[[[U]],[R[7]]]],[11,R[15],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],[R[16]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[7]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[13],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,N],[11,R[9],E,E,1,[[[U]],[R[7]]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"]],[R[16]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[7]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[13],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,N],[11,R[9],E,E,2,[[[U]],[R[7]]]],[11,R[15],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"]],[R[16]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[7]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[13],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,N],[11,R[9],E,E,3,[[[U]],[R[7]]]],[11,R[15],E,E,3,[[["self"]],[T]]],[11,R[12],E,E,3,[[["self"]],[R[16]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[7]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[13],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,N],[11,R[9],E,E,4,[[[U]],[R[7]]]],[11,R[15],E,E,4,[[["self"]],[T]]],[11,R[12],E,E,4,[[["self"]],[R[16]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[7]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[13],E,E,5,[[["self"]],[T]]],[11,R[14],E,E,5,N],[11,R[9],E,E,5,[[[U]],[R[7]]]],[11,R[15],E,E,5,[[["self"]],[T]]],[11,R[12],E,E,5,[[["self"]],[R[16]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[7]]]],[11,"eq",E,E,1,[[["self"],["vec2"]],["bool"]]],[11,"ne",E,E,1,[[["self"],["vec2"]],["bool"]]],[11,"eq",E,E,2,[[["self"],["vec3"]],["bool"]]],[11,"ne",E,E,2,[[["self"],["vec3"]],["bool"]]],[11,"eq",E,E,3,[[["self"],["vec4"]],["bool"]]],[11,"ne",E,E,3,[[["self"],["vec4"]],["bool"]]],[11,"eq",E,E,4,[[["self"],["vec5"]],["bool"]]],[11,"ne",E,E,4,[[["self"],["vec5"]],["bool"]]],[11,"eq",E,E,5,[[["self"],["vec6"]],["bool"]]],[11,"ne",E,E,5,[[["self"],["vec6"]],["bool"]]],[11,"clone",E,E,1,[[["self"]],["vec2"]]],[11,"clone",E,E,2,[[["self"]],["vec3"]]],[11,"clone",E,E,3,[[["self"]],["vec4"]]],[11,"clone",E,E,4,[[["self"]],["vec5"]]],[11,"clone",E,E,5,[[["self"]],["vec6"]]],[11,"mul",E,E,1,N],[11,"mul",E,E,2,N],[11,"mul",E,E,3,N],[11,"mul",E,E,4,N],[11,"mul",E,E,5,N],[11,"index",E,E,0,N],[11,"index",E,E,1,N],[11,"index",E,E,2,N],[11,"index",E,E,3,N],[11,"index",E,E,4,N],[11,"index",E,E,5,N],[11,R[17],E,E,1,N],[11,R[17],E,E,2,N],[11,R[17],E,E,3,N],[11,R[17],E,E,4,N],[11,R[17],E,E,5,N],[11,"fmt",E,E,0,[[["self"],[R[18]]],[R[7]]]],[11,"fmt",E,E,1,[[["self"],[R[18]]],[R[7]]]],[11,"fmt",E,E,2,[[["self"],[R[18]]],[R[7]]]],[11,"fmt",E,E,3,[[["self"],[R[18]]],[R[7]]]],[11,"fmt",E,E,4,[[["self"],[R[18]]],[R[7]]]],[11,"fmt",E,E,5,[[["self"],[R[18]]],[R[7]]]]],"p":[[3,"Matrix3"],[3,"Vec2"],[3,"Vec3"],[3,"Vec4"],[3,"Vec5"],[3,"Vec6"],[3,R[19]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);